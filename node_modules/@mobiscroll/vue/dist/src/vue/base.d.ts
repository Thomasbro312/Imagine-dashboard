declare module 'vue' {
    interface HTMLAttributes {
        className?: any;
        dangerouslySetInnerHTML?: any;
        readOnly?: any;
        tabIndex?: any;
    }
    interface SVGAttributes {
        className?: any;
    }
}
export declare function Directive(args: any): (ctor: any) => any;
/** @hidden */
export declare class Base<PropsType, StateType> {
    /** @hidden */
    state: StateType;
    /** @hidden */
    props: PropsType;
    /** @hidden */
    s: PropsType;
    /** @hidden */
    get value(): any;
    /** @hidden */
    set value(v: any);
    /** @hidden */
    _el: HTMLElement;
    /** @hidden */
    _shouldEnhance?: HTMLElement | string | boolean | null;
    /** @hidden */
    _vue: any;
    protected _opt: any;
    private __value;
    /** @hidden */
    setState(newState: any): void;
    /** @hidden */
    _safeHtml(html: string): string;
    /** @hidden */
    _setEl: (el: any) => void;
    protected forceUpdate(): void;
    protected _init(): void;
    protected __init(): void;
    protected _emit(name: string, args: any): void;
    protected _mounted(): void;
    protected _updated(): void;
    protected _destroy(): void;
    protected __destroy(): void;
    protected _willUpdate(): void;
}
export declare const Bool: {
    type: BooleanConstructor;
    default: undefined;
};
export declare const baseProps: {
    baseTheme: StringConstructor;
    className: StringConstructor;
    cssClass: StringConstructor;
    locale: (ObjectConstructor | StringConstructor)[];
    modules: ObjectConstructor[];
    responsive: ObjectConstructor;
    rtl: {
        type: BooleanConstructor;
        default: undefined;
    };
    theme: StringConstructor;
    themeVariant: StringConstructor;
    touchUi: {
        type: (BooleanConstructor | StringConstructor)[];
        default: undefined;
    };
    onDestroy: FunctionConstructor;
    onInit: FunctionConstructor;
};
export declare function createComponent(Component: any, data: any): import("vue").DefineComponent<any, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
    [x: string]: any;
}>;
